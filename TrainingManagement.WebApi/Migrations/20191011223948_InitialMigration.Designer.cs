// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingManagement.WebApi.Persistence;

namespace TrainingManagement.WebApi.Migrations
{
    [DbContext(typeof(TrainingManagementRefDbContext))]
    [Migration("20191011223948_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.Property<int>("TrainingCenterId");

                    b.Property<long?>("TrainingCenterId1");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCenterId1");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.DegreeUv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DegreeId");

                    b.Property<long>("UvId");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("UvId");

                    b.ToTable("DegreeUv");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("EndDate");

                    b.Property<long?>("IntervenerId");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("StartDate");

                    b.Property<long>("TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("IntervenerId");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.ProjectSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("ProjectId");

                    b.Property<long>("RequiredLevelId");

                    b.Property<long>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequiredLevelId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProjectSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.ProjectTrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ProjectId");

                    b.Property<string>("Role");

                    b.Property<long>("TrainingTeamMemberId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TrainingTeamMemberId");

                    b.ToTable("ProjectTrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.RatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.HasKey("Id");

                    b.ToTable("RatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("TrainingCenterId");

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.SkillRatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<long?>("IdSkill");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<int>("RatingLevelId");

                    b.Property<long?>("RatingLevelId1");

                    b.Property<long?>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("RatingLevelId1");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillRatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Mail");

                    b.Property<string>("Photo");

                    b.Property<long?>("Run_PromotionId");

                    b.Property<long?>("Run_TrainingYearId");

                    b.Property<int>("TrainingCenterId");

                    b.Property<long?>("TrainingCenterId1");

                    b.HasKey("Id");

                    b.HasIndex("Run_PromotionId");

                    b.HasIndex("Run_TrainingYearId");

                    b.HasIndex("TrainingCenterId1");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TagSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SkillId");

                    b.Property<long>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TagId");

                    b.ToTable("TagSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TagTrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TagId");

                    b.Property<long>("TrainingTeamMemberId");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TrainingTeamMemberId");

                    b.ToTable("TagTrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TrainingCenter");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("TrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<long>("DegreeId");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<int>("YearNumber");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.ToTable("TrainingYear");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingYearUv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TrainingYearId");

                    b.Property<long>("UvId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingYearId");

                    b.HasIndex("UvId");

                    b.ToTable("TrainingYearUv");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("UvId");

                    b.HasKey("Id");

                    b.HasIndex("UvId");

                    b.ToTable("Ue");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.UeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SkillId");

                    b.Property<long?>("SkillId1");

                    b.Property<int>("UeId");

                    b.Property<long?>("UeId1");

                    b.HasKey("Id");

                    b.HasIndex("SkillId1");

                    b.HasIndex("UeId1");

                    b.ToTable("UeSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Uv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("TrainingCenterId");

                    b.Property<long?>("UvId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCenterId");

                    b.HasIndex("UvId");

                    b.ToTable("Uv");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EducationalManager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<long>("IntervenerId");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.HasKey("Id");

                    b.ToTable("Run_EducationalManager");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EducationalManagerId");

                    b.Property<long?>("GroupId");

                    b.Property<long?>("IntervenerId");

                    b.Property<string>("Label");

                    b.Property<int?>("ParentEvaluationId");

                    b.HasKey("Id");

                    b.HasIndex("EducationalManagerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IntervenerId");

                    b.HasIndex("ParentEvaluationId");

                    b.ToTable("Run_EvaluationGroup");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationIndividual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<long?>("EducationalManagerId");

                    b.Property<long?>("IntervenerId");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<int?>("ParentEvaluationGroupId");

                    b.Property<long?>("ParentGroupEvaluationId");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("EducationalManagerId");

                    b.HasIndex("IntervenerId");

                    b.HasIndex("ParentEvaluationGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("Run_EvaluationIndividual");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationIndividualProjectSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("LevelReachedId");

                    b.Property<long>("RunProjectSkill_Id");

                    b.Property<int?>("Run_EvaluationGroupId");

                    b.Property<long>("Run_EvaluationIndividualId");

                    b.Property<long?>("Run_ProjectSkillId");

                    b.Property<long?>("Run_SkillRatingLevelId");

                    b.HasKey("Id");

                    b.HasIndex("Run_EvaluationGroupId");

                    b.HasIndex("Run_EvaluationIndividualId");

                    b.HasIndex("Run_ProjectSkillId");

                    b.HasIndex("Run_SkillRatingLevelId");

                    b.ToTable("Run_EvaluationIndividualProjectSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("EndDate");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("ProjectId");

                    b.Property<string>("StartDate");

                    b.Property<long>("TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("Run_Project");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjectSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("RequiredLevelId");

                    b.Property<long>("Run_ProjectId");

                    b.Property<long?>("Run_RequiredLevelId");

                    b.Property<long?>("Run_SkillId");

                    b.Property<long>("SkillId");

                    b.Property<long>("projectSkillId");

                    b.HasKey("Id");

                    b.HasIndex("Run_ProjectId");

                    b.HasIndex("Run_RequiredLevelId");

                    b.HasIndex("Run_SkillId");

                    b.HasIndex("projectSkillId");

                    b.ToTable("Run_ProjectSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjectTrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Role");

                    b.Property<long>("TrainingTeamMemberId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TrainingTeamMemberId");

                    b.ToTable("Run_ProjectTrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjetGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("Run_EducationalManagerId");

                    b.Property<long>("Run_ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("Run_EducationalManagerId");

                    b.HasIndex("Run_ProjectId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Promotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("RunTrainingYearId");

                    b.Property<long?>("Run_TrainingYearId");

                    b.Property<long>("TrainingCenterId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("Run_TrainingYearId");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("Run_Promotion");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_RatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<long?>("RatingLevelId");

                    b.Property<long>("SkillLevelId");

                    b.HasKey("Id");

                    b.HasIndex("RatingLevelId");

                    b.ToTable("Run_RatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("SkillId");

                    b.Property<long>("TrainingCenterId");

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainingCenterId");

                    b.ToTable("Run_Skill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_SkillRatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Run_RatingLevelId");

                    b.Property<long?>("Run_SkillId");

                    b.Property<long>("SkillRatingLevelId");

                    b.HasKey("Id");

                    b.HasIndex("Run_RatingLevelId");

                    b.HasIndex("Run_SkillId");

                    b.HasIndex("SkillRatingLevelId");

                    b.ToTable("Run_SkillRatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<int>("ProjectGroupId");

                    b.Property<long?>("ProjetGroupId");

                    b.Property<int>("StudentId");

                    b.Property<long?>("StudentId1");

                    b.HasKey("Id");

                    b.HasIndex("ProjetGroupId");

                    b.HasIndex("StudentId1");

                    b.ToTable("Run_StudentGroup");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_TrainingYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.Property<long>("ScholarYearId");

                    b.Property<long>("TrainingYearId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingYearId");

                    b.ToTable("Run_TrainingYear");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Ue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("Run_UvId");

                    b.Property<long>("UeId");

                    b.HasKey("Id");

                    b.HasIndex("Run_UvId");

                    b.HasIndex("UeId");

                    b.ToTable("Run_Ue");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_UeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Run_SkillId");

                    b.Property<int>("Run_UeId");

                    b.Property<long?>("SkillId");

                    b.Property<long?>("UeId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UeId");

                    b.ToTable("Run_UeSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Uv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<long>("DegreeId");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Run_TrainingYearId");

                    b.Property<long>("TrainingCenterId");

                    b.Property<long>("UvId");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("Run_TrainingYearId");

                    b.HasIndex("TrainingCenterId");

                    b.HasIndex("UvId");

                    b.ToTable("Run_Uv");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Degree", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Degrees")
                        .HasForeignKey("TrainingCenterId1");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.DegreeUv", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Degree", "Degree")
                        .WithMany("DegreeUvs")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Uv", "Uv")
                        .WithMany("DegreeUvs")
                        .HasForeignKey("UvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Project", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "Intervener")
                        .WithMany()
                        .HasForeignKey("IntervenerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Projects")
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.ProjectSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Project", "Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.SkillRatingLevel", "RequiredLevel")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("RequiredLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Skill", "Skill")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.ProjectTrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Project", "Project")
                        .WithMany("ProjectTrainingTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "TrainingTeamMember")
                        .WithMany("ProjectTrainingTeamMembers")
                        .HasForeignKey("TrainingTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Skill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Skills")
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.SkillRatingLevel", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.RatingLevel", "RatingLevel")
                        .WithMany()
                        .HasForeignKey("RatingLevelId1");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Skill", "Skill")
                        .WithMany("Levels")
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Student", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Promotion")
                        .WithMany("Students")
                        .HasForeignKey("Run_PromotionId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_TrainingYear")
                        .WithMany("Students")
                        .HasForeignKey("Run_TrainingYearId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Students")
                        .HasForeignKey("TrainingCenterId1");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TagSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Skill", "Skill")
                        .WithMany("TagSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Tag", "Tag")
                        .WithMany("TagSkills")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TagTrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Tag", "Tag")
                        .WithMany("TagTrainingTeamMembers")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "TrainingTeamMember")
                        .WithMany("TagTrainingTeamMembers")
                        .HasForeignKey("TrainingTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Interveners")
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingYear", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Degree", "Degree")
                        .WithMany("TrainingYears")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.TrainingYearUv", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingYear", "TrainingYear")
                        .WithMany("TrainingYearUvs")
                        .HasForeignKey("TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Uv", "Uv")
                        .WithMany("TrainingYearUvs")
                        .HasForeignKey("UvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ue", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Uv", "Uv")
                        .WithMany("Ues")
                        .HasForeignKey("UvId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.UeSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Skill", "Skill")
                        .WithMany("UeSkills")
                        .HasForeignKey("SkillId1");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ue", "Ue")
                        .WithMany("UeSkills")
                        .HasForeignKey("UeId1");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Uv", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany("Uvs")
                        .HasForeignKey("TrainingCenterId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Uv")
                        .WithMany("Uvs")
                        .HasForeignKey("UvId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationGroup", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EducationalManager", "EducationalManager")
                        .WithMany("Run_EvaluationGroups")
                        .HasForeignKey("EducationalManagerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_ProjetGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "Intervener")
                        .WithMany()
                        .HasForeignKey("IntervenerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EvaluationGroup", "ParentEvaluation")
                        .WithMany()
                        .HasForeignKey("ParentEvaluationId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationIndividual", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EducationalManager", "EducationalManager")
                        .WithMany("Run_EvaluationIndividuals")
                        .HasForeignKey("EducationalManagerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "Intervener")
                        .WithMany()
                        .HasForeignKey("IntervenerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EvaluationGroup", "ParentEvaluationGroup")
                        .WithMany("EvaluationIndividuals")
                        .HasForeignKey("ParentEvaluationGroupId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_EvaluationIndividualProjectSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EvaluationGroup")
                        .WithMany("EvaluationProjectSkills")
                        .HasForeignKey("Run_EvaluationGroupId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EvaluationIndividual", "Run_EvaluationIndividual")
                        .WithMany("EvaluationProjectSkills")
                        .HasForeignKey("Run_EvaluationIndividualId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_ProjectSkill", "Run_ProjectSkill")
                        .WithMany()
                        .HasForeignKey("Run_ProjectSkillId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_SkillRatingLevel", "Run_SkillRatingLevel")
                        .WithMany()
                        .HasForeignKey("Run_SkillRatingLevelId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Project", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjectSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Project", "Run_Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("Run_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_SkillRatingLevel", "Run_RequiredLevel")
                        .WithMany("Run_ProjectSkills")
                        .HasForeignKey("Run_RequiredLevelId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Skill", "Run_Skill")
                        .WithMany("Run_ProjectSkills")
                        .HasForeignKey("Run_SkillId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.ProjectSkill", "ProjectSkill")
                        .WithMany()
                        .HasForeignKey("projectSkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjectTrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Project", "Project")
                        .WithMany("Run_ProjectTrainingTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingTeamMember", "TrainingTeamMember")
                        .WithMany()
                        .HasForeignKey("TrainingTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_ProjetGroup", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_EducationalManager")
                        .WithMany("Run_ProjetGroups")
                        .HasForeignKey("Run_EducationalManagerId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Project", "RunProject")
                        .WithMany()
                        .HasForeignKey("Run_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Promotion", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_TrainingYear", "Run_TrainingYear")
                        .WithMany()
                        .HasForeignKey("Run_TrainingYearId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_RatingLevel", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.RatingLevel", "RatingLevel")
                        .WithMany()
                        .HasForeignKey("RatingLevelId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Skill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_SkillRatingLevel", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_RatingLevel", "Run_RatingLevel")
                        .WithMany()
                        .HasForeignKey("Run_RatingLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Skill", "Run_Skill")
                        .WithMany("Run_SkillRatingLevels")
                        .HasForeignKey("Run_SkillId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.SkillRatingLevel", "SkillRatingLevel")
                        .WithMany()
                        .HasForeignKey("SkillRatingLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_StudentGroup", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_ProjetGroup", "ProjetGroup")
                        .WithMany("Run_StudentGroups")
                        .HasForeignKey("ProjetGroupId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_TrainingYear", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingYear", "TrainingYear")
                        .WithMany()
                        .HasForeignKey("TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Ue", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Uv", "Run_Uv")
                        .WithMany("Run_Ues")
                        .HasForeignKey("Run_UvId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ue", "Ue")
                        .WithMany()
                        .HasForeignKey("UeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_UeSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Skill", "Skill")
                        .WithMany("Run_UeSkills")
                        .HasForeignKey("SkillId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_Ue", "Ue")
                        .WithMany("Run_UeSkills")
                        .HasForeignKey("UeId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Run.Run_Uv", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Run.Run_TrainingYear", "Run_TrainingYear")
                        .WithMany()
                        .HasForeignKey("Run_TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.TrainingCenter", "TrainingCenter")
                        .WithMany()
                        .HasForeignKey("TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Uv", "Uv")
                        .WithMany()
                        .HasForeignKey("UvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
