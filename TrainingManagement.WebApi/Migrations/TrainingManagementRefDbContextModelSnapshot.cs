// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingManagement.WebApi.Persistence;

namespace TrainingManagement.WebApi.Migrations
{
    [DbContext(typeof(TrainingManagementRefDbContext))]
    partial class TrainingManagementRefDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("Ref_TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.ToTable("Ref_Block");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.Property<long?>("Ref_TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.ToTable("Ref_Degree");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_DegreeBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_BlockId");

                    b.Property<long>("Ref_DegreeId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_BlockId");

                    b.HasIndex("Ref_DegreeId");

                    b.ToTable("Ref_DegreeBlock");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("EndDate");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_TrainingCenterId");

                    b.Property<long?>("Ref_TrainingTeamMemberId");

                    b.Property<string>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.HasIndex("Ref_TrainingTeamMemberId");

                    b.ToTable("Ref_Project");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_ProjectSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_ProjectId");

                    b.Property<long>("Ref_SkillId");

                    b.Property<long>("Ref_SkillRatingLevelId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_ProjectId");

                    b.HasIndex("Ref_SkillId");

                    b.HasIndex("Ref_SkillRatingLevelId");

                    b.ToTable("Ref_ProjectSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_ProjectTrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_ProjectId");

                    b.Property<long>("Ref_TrainingTeamMemberId");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.HasIndex("Ref_ProjectId");

                    b.HasIndex("Ref_TrainingTeamMemberId");

                    b.ToTable("Ref_ProjectTrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_RatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.HasKey("Id");

                    b.ToTable("Ref_RatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.ToTable("Ref_Skill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_SkillRatingLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_RatingLevelId");

                    b.Property<long>("Ref_SkillId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_RatingLevelId");

                    b.HasIndex("Ref_SkillId");

                    b.ToTable("Ref_SkillRatingLevel");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Mail");

                    b.Property<string>("Photo");

                    b.Property<long>("Ref_TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.ToTable("Ref_Student");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ref_Tag");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TagSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_SkillId");

                    b.Property<long>("Ref_TagId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_SkillId");

                    b.HasIndex("Ref_TagId");

                    b.ToTable("Ref_TagSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TagTrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_TagId");

                    b.Property<long>("Ref_TrainingTeamMemberId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TagId");

                    b.HasIndex("Ref_TrainingTeamMemberId");

                    b.ToTable("Ref_TagTrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ref_TrainingCenter");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_TrainingCenterId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingCenterId");

                    b.ToTable("Ref_TrainingTeamMember");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long>("Ref_DegreeId");

                    b.Property<int>("YearNumber");

                    b.HasKey("Id");

                    b.HasIndex("Ref_DegreeId");

                    b.ToTable("Ref_TrainingYear");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingYearBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_BlockId");

                    b.Property<long>("Ref_TrainingYearId");

                    b.Property<long>("Ref_UvId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_TrainingYearId");

                    b.HasIndex("Ref_UvId");

                    b.ToTable("Ref_TrainingYearBlock");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Ue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("Ref_UvId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_UvId");

                    b.ToTable("Ref_Ue");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_UeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Ref_SkillId");

                    b.Property<long>("Ref_UeId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_SkillId");

                    b.HasIndex("Ref_UeId");

                    b.ToTable("Ref_UeSkill");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Uv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CreatorLogin");

                    b.Property<string>("Description");

                    b.Property<string>("Label");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("LastUpdaterLogin");

                    b.Property<long?>("Ref_BlockId");

                    b.Property<long?>("Ref_UvParentId");

                    b.HasKey("Id");

                    b.HasIndex("Ref_BlockId");

                    b.HasIndex("Ref_UvParentId");

                    b.ToTable("Ref_Uv");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Block", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_Blocks")
                        .HasForeignKey("Ref_TrainingCenterId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Degree", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_Degrees")
                        .HasForeignKey("Ref_TrainingCenterId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_DegreeBlock", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Block", "Ref_Block")
                        .WithMany("Ref_DegreeBlocks")
                        .HasForeignKey("Ref_BlockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Degree", "Ref_Degree")
                        .WithMany("Ref_DegreeBlocks")
                        .HasForeignKey("Ref_DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Project", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_Projects")
                        .HasForeignKey("Ref_TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingTeamMember", "Ref_TrainingTeamMember")
                        .WithMany("Ref_Projects")
                        .HasForeignKey("Ref_TrainingTeamMemberId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_ProjectSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Project", "Ref_Project")
                        .WithMany("Ref_ProjectSkills")
                        .HasForeignKey("Ref_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", "Ref_Skill")
                        .WithMany("Ref_ProjectSkills")
                        .HasForeignKey("Ref_SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_SkillRatingLevel", "Ref_SkillRatingLevel")
                        .WithMany("Ref_ProjectSkills")
                        .HasForeignKey("Ref_SkillRatingLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_ProjectTrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Project", "Ref_Project")
                        .WithMany("Ref_ProjectTrainingTeamMembers")
                        .HasForeignKey("Ref_ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingTeamMember", "Ref_TrainingTeamMember")
                        .WithMany("Ref_ProjectTrainingTeamMembers")
                        .HasForeignKey("Ref_TrainingTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_Skills")
                        .HasForeignKey("Ref_TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_SkillRatingLevel", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_RatingLevel", "Ref_RatingLevel")
                        .WithMany()
                        .HasForeignKey("Ref_RatingLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", "Ref_Skill")
                        .WithMany("Ref_Levels")
                        .HasForeignKey("Ref_SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Student", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_Students")
                        .HasForeignKey("Ref_TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TagSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", "Ref_Skill")
                        .WithMany("Ref_TagSkills")
                        .HasForeignKey("Ref_SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Tag", "Ref_Tag")
                        .WithMany("Ref_TagSkills")
                        .HasForeignKey("Ref_TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TagTrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Tag", "Ref_Tag")
                        .WithMany("Ref_TagTrainingTeamMembers")
                        .HasForeignKey("Ref_TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingTeamMember", "Ref_TrainingTeamMember")
                        .WithMany("Ref_TagTrainingTeamMembers")
                        .HasForeignKey("Ref_TrainingTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingTeamMember", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingCenter", "Ref_TrainingCenter")
                        .WithMany("Ref_TrainingTeamMembers")
                        .HasForeignKey("Ref_TrainingCenterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingYear", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Degree", "Ref_Degree")
                        .WithMany("Ref_TrainingYears")
                        .HasForeignKey("Ref_DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingYearBlock", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Block", "Ref_Block")
                        .WithMany("Ref_TrainingYearBlocks")
                        .HasForeignKey("Ref_TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_TrainingYear", "Ref_TrainingYear")
                        .WithMany("Ref_TrainingYearBlocks")
                        .HasForeignKey("Ref_TrainingYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Uv", "Ref_Uv")
                        .WithMany("Ref_TrainingYearBlocks")
                        .HasForeignKey("Ref_UvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Ue", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Uv", "Ref_Uv")
                        .WithMany("Ref_Ues")
                        .HasForeignKey("Ref_UvId");
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_UeSkill", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Skill", "Ref_Skill")
                        .WithMany("Ref_UeSkills")
                        .HasForeignKey("Ref_SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Ue", "Ref_Ue")
                        .WithMany("Ref_UeSkills")
                        .HasForeignKey("Ref_UeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainingManagement.RestApi.Domain.Ref.Ref_Uv", b =>
                {
                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Block", "Ref_Block")
                        .WithMany("Ref_Uvs")
                        .HasForeignKey("Ref_BlockId");

                    b.HasOne("TrainingManagement.RestApi.Domain.Ref.Ref_Uv", "Ref_UvParent")
                        .WithMany("Ref_Uvs")
                        .HasForeignKey("Ref_UvParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
